# ขั้นตอนการทำงาน
## (1)เรียกคำสั่ง
คำสั่งที่ใช้มี ดังนี้
Address	  0  1  2  3    คำสั่ง		
00000000  93 00 00 02 	addi x1, x0, 32		:นำ 32 + X0 และนำคำตอบที่ได้เก็บที่ X1 
00000004  37 01 00 c0	lui x2, 0xc0000000 	:เอาค่า 0xc0000000 32 bit เก็บที่ X2 เพียง 20 bit
00000008  83 c1 00 00	lbu x3, 0(x1) 		:ไปอ่านหน่วยความจำที่ X1 เพียง 1 bite และนำไปเก็บที่ X3
0000000c  63 88 01 00	beq x3, x0, +16		:ถ้า X3 = X0 ให้กระโดดถัดไป 16 
00000010  23 00 31 00	sb x3, 0(x2)		:นำข้อมูลใน X3 ไปเก็บที่ X2
00000014  93 00 10 00	addi x1, x1, 1		:นำ 1 + X1 และนำคำตอบที่ได้เก็บที่ X1
00000018  6f f0 1f ff	jal x0, -16		:กระโดดถอยไป 16 
0000001C  6f 00 00 00	jal x0, 0		:กระโดดวนอยู่ที่เดิม
00000020  53 41 00 00		-		:ใส่ข้อมูลเลขฐาน 16 ของตัวอักษรที่เราต้องการแสดง
:เราจะใส่ข้อมูลและคำสั่งลงในส่วน Memory โดยข้อมูลที่เก็บในหน่วยความจำจะเป็นเลขฐาน 16 ใน 1 Address มีทั้งหมด 32 bit
เมื่อใส่ข้อมูลและคำสั่งลงในส่วน Memory เรียบร้อยแล้ว คำสั่งจะถูกเรียกไปที่ Bus

## (2)แปลคำสั่ง
: เมื่อเรียกคำสั่งไปที่ Bus โปรแกรมจะทำการส่งคำสั่งต่อไปที่ Instruction reg. 
เพื่อทำการแปลคำสั่งว่าตัวผู้เขียนต้องการสั่งให้ทำอะไร

## (3)ประมวลผล
:เมื่อคำสั่งได้ทำการส่งไปที่ Instruction reg. เพื่อทำการแปลคำสั่งเรียบร้อยแล้ว จะส่งต่อไปที่ ALU เพื่อทำการคำนวณ

## (4)เก็บข้อมูล
: เมื่อได้ทำการคำนวณเรียบร้อยแล้ว จากนั้นจะส่งคำตอบไปเก็บที่ส่วน General-purpose regs (หน่วยความจำขนาดเล็ก)

# ผลลัพธ์
: เมื่อรันโปรแกรมเรียบร้อยแล้ว Output ส่วน Text I/O  เป็นตัวอักษร SA
